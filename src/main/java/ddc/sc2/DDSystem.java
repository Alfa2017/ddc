package ddc.sc2;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class DDSystem extends Contract {
    private static final String BINARY = "606060405260088054604060020a608060020a031967ffffffffffffffff199091166001171668010000000000000000179055600f805460a060020a60e060020a0319169055341561005057600080fd5b60405160a08062003151833981016040528080519190602001805191906020018051919060200180519190602001805191508190508286868682600160a060020a038116156101115780600160a060020a031663589bfb59306040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561010057600080fd5b5af1151561010d57600080fd5b5050505b60008054600160a060020a039283166101000261010060a860020a031990911617905560028054938216600160a060020a03199485161790556003805492821692841692909217909155600b805494821694831694909417909355600f805494909316931692909217905550504360105550505050612fbb80620001966000396000f3006060604052600436106101c95763ffffffff60e060020a6000350416630332594481146101ce57806307cd6cda146101f857806307fe176b1461022d578063090dbda91461026a5780630a8267581461028f5780631ef92578146102be57806327c4fcb0146102d15780632cc61bad146103025780632f2770db1461031b57806336076f6e1461032e57806342073cc81461035d5780635325d14c146103ae578063589bfb59146103c75780635cf8911d146103e65780635d3756f3146104085780636138fede1461042a57806361ba7641146104c657806361ee1bb2146104dc5780636ff968c3146104f25780637265d0401461050557806372855d581461051857806375d0c0dc146105805780637ab42c511461060a5780637b1039991461068c5780637fbccfc61461069f57806394e90e1b146106b257806397b0a982146106cb5780639a935e54146107085780639d668e981461078d578063a0a8e460146107c4578063a3907d71146107d7578063a3d0b38b146107ea578063b36a9a7c14610803578063ba51b14e14610825578063ce1426871461083b578063e15855291461085d578063e3ed7ee114610876578063ee07080514610898578063ff9bedc5146108ab575b600080fd5b34156101d957600080fd5b6101e460043561097f565b604051901515815260200160405180910390f35b341561020357600080fd5b61022b60048035906024803591600160a060020a036044351691606435908101910135610994565b005b341561023857600080fd5b610252600160a060020a0360043516602435604435610da2565b60405191825260208201526040908101905180910390f35b341561027557600080fd5b61022b6004356024356001604060020a0360443516610de7565b341561029a57600080fd5b6102a2610ef4565b604051600160a060020a03909116815260200160405180910390f35b34156102c957600080fd5b6101e4610f03565b34156102dc57600080fd5b6102f0600160a060020a0360043516610f76565b60405190815260200160405180910390f35b341561030d57600080fd5b6101e4600435602435610fe5565b341561032657600080fd5b61022b611005565b341561033957600080fd5b610341611037565b6040516001604060020a03909116815260200160405180910390f35b341561036857600080fd5b6102a260046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061104d95505050505050565b34156103b957600080fd5b6102a26004356024356110d0565b34156103d257600080fd5b61022b600160a060020a03600435166110f6565b34156103f157600080fd5b6102526001604060020a0360043516602435611120565b341561041357600080fd5b6101e4600160a060020a03600435166024356112ec565b341561043557600080fd5b610440600435611386565b6040518381526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b83811015610489578082015183820152602001610471565b50505050905090810190601f1680156104b65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156104d157600080fd5b61022b600435611463565b34156104e757600080fd5b6103416004356115cd565b34156104fd57600080fd5b6102a26115e8565b341561051057600080fd5b6102f06115f7565b341561052357600080fd5b61052e6004356115fd565b6040518315158152600160a060020a0383166020820152606060408201818152908201838181518152602001915080519060200190808383600083811015610489578082015183820152602001610471565b341561058b57600080fd5b610593611716565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156105cf5780820151838201526020016105b7565b50505050905090810190601f1680156105fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561061557600080fd5b61022b60048035906024803591600160a060020a03604435169160643591608435916001604060020a0360a435169160c435916101049060e43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061175795505050505050565b341561069757600080fd5b6102a2611a76565b34156106aa57600080fd5b6102a2611a85565b34156106bd57600080fd5b61022b600435602435611a99565b34156106d657600080fd5b6106e4600435602435611c3c565b6040516001604060020a039283168152911660208201526040908101905180910390f35b341561071357600080fd5b6102a2600160a060020a0360048035821691602480359091169160443591600160c060020a031960643516916084359160a435919060e49060c43590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350611c8892505050565b341561079857600080fd5b61022b6004803590602480359160443591600160a060020a036064351691608435918201910135611ff4565b34156107cf57600080fd5b6105936123e0565b34156107e257600080fd5b61022b61240c565b34156107f557600080fd5b61052e60043560243561242c565b341561080e57600080fd5b6101e4600160a060020a0360043516602435612551565b341561083057600080fd5b61052e6004356125e5565b341561084657600080fd5b6101e4600160a060020a03600435166024356126b4565b341561086857600080fd5b61052e60043560243561272a565b341561088157600080fd5b610440600160a060020a03600435166024356127ca565b34156108a357600080fd5b6101e4612818565b34156108b657600080fd5b6102a2600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496600160a060020a03873581169760208082013583169850604080830135841698506060830135909316965092945060a081019350608001358401808301929035918291601f83018190048102019051908101604052818152929190602084018383808284375094965061282195505050505050565b60009081526009602052604090205460ff1690565b61099e33866112ec565b15156109e957600080516020612f308339815191526040517f4e4f545f4444535f41444d494e00000000000000000000000000000000000000815260200160405180910390a1610d9b565b7f4146544444534164644f7267616e697a6174696f6e0000000000000000000000851415610a6957610a1a8461097f565b15610a6457600080516020612f308339815191526040517f4f5247414e495a4154494f4e5f414c52454144595f4558495354000000000000815260200160405180910390a1610d9b565b610bbb565b7f414654444453456469744f7267616e697a6174696f6e00000000000000000000851415610ad357610a9a8461097f565b1515610a6457600080516020612f30833981519152604051600080516020612f10833981519152815260200160405180910390a1610d9b565b7f41465444445352656d6f76654f7267616e697a6174696f6e0000000000000000851415610b8257610b048461097f565b1515610b0f57600080fd5b610b188461097f565b1515610b5157600080516020612f30833981519152604051600080516020612f10833981519152815260200160405180910390a1610d9b565b60008481526009602052604081208054600160a860020a031916815590610b7b6001830182612df8565b5050610d9b565b600080516020612f30833981519152604051609160020a6d2aa725a727aba72fa0a1aa24a7a702815260200160405180910390a1610d9b565b6008805467ffffffffffffffff19811660016001604060020a0392831690810190921617909155849086907fe0f07eb42bbaf3638d8893ade3d63a97324e77399b1cf4e1af5ef0ae1b607ee0906040516001604060020a03909116815260200160405180910390a360606040519081016040528060011515815260200184600160a060020a0316815260200183838080601f01602080910402602001604051908101604052818152929190602084018383808284375050509290935250505060008581526009602052604090208151815460ff191690151517815560208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181600101908051610cd7929160200190612e3f565b5090505060606040519081016040528060011515815260200184600160a060020a0316815260200183838080601f0160208091040260200160405190810160405281815292919060208401838380828437505050929093525050506000858152600a6020908152604080832090915290208151815460ff191690151517815560208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181600101908051610d97929160200190612e3f565b5050505b5050505050565b600160a060020a03831660009081526005602090815260408083208584529091528120548190610ddb906001604060020a031684611120565b91509150935093915050565b600160a060020a0333166000908152600d60205260409020541515610e4b57600080516020612f308339815191526040517f4e4f545f524547495354455245445f4d4f525447414745000000000000000000815260200160405180910390a1610eef565b600f805460a060020a67ffffffffffffffff0219811660a060020a918290046001604060020a0390811660018101909116909202179091557f0f4406760287c5f715d41b8d9b6842a6b1271563bc313efb6b5946cfcefaafeb90843385856040516001604060020a0395861681526020810194909452600160a060020a0390921660408085019190915260608401919091529216608082015260a001905180910390a15b505050565b600354600160a060020a031681565b600254600090600160a060020a031663f851a4406040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610f4557600080fd5b5af11515610f5257600080fd5b50505060405180519050600160a060020a031632600160a060020a03161490505b90565b600254600090600160a060020a0316630fe6b9498360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610fc957600080fd5b5af11515610fd657600080fd5b50505060405180519392505050565b6000918252600a6020908152604080842092845291905290205460ff1690565b60005460ff161561101557600080fd5b61101d610f03565b151561102857600080fd5b6000805460ff19166001179055565b60035460a060020a90046001604060020a031681565b6000600e6000836040518082805190602001908083835b602083106110835780518252601f199092019160209182019101611064565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002054600160a060020a031692915050565b6000918252600c60209081526040808420928452919052902054600160a060020a031690565b6110fe611005565b60018054600160a060020a031916600160a060020a0392909216919091179055565b60008061114d337f4146544444534368616e6765446f635374617475730000000000000000000000612551565b151561118657600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a16112e5565b6001604060020a0384166000908152600660205260409020546111aa9033906126b4565b156111ce576001604060020a03841660009081526006602052604090206001018390555b6001604060020a0384166000908152600660205260409020600201546111f59033906126b4565b15611219576001604060020a03841660009081526006602052604090206003018390555b6001604060020a0384811660009081526006602052604090819020600281015481546004830154600590930154919490937f8d17d8496bfd69e8fcf6b5804974b5e1ab215910b67be33e0871002c20234d11938a9392811692604060020a909104600160a060020a031691516001604060020a039485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a350506001604060020a038216600090815260066020526040902060018101546003909101545b9250929050565b600254600354600091600160a060020a039081169163fa34772d918691168560405160e060020a63ffffffff8616028152600160a060020a039384166004820152919092166024820152604481019190915260ea60020a6210599d026064820152608401602060405180830381600087803b151561136957600080fd5b5af1151561137657600080fd5b5050506040518051949350505050565b600080611391612ebd565b6000848152600660208181526040928390206001808201546003830154929094018054949592949093849360029383161561010002600019019092169290920491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561144f5780601f106114245761010080835404028352916020019161144f565b820191906000526020600020905b81548152906001019060200180831161143257829003601f168201915b505050505090509250925092509193909250565b336000600160a060020a038216631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156114a357600080fd5b5af115156114b057600080fd5b50505060405180516000818152600c6020526040808220929450600160a060020a03861693508390638381f58a90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561150a57600080fd5b5af1151561151757600080fd5b5050506040518051825250602081019190915260400160002054600160a060020a03161461158457600080516020612f308339815191526040517f4e4f545f524547495354455245445f4143434f554e5400000000000000000000815260200160405180910390a1610eef565b807fabd8e8117664849ee708b0ef03630f40ebf3577283ed8462e8f2a379d3c7f1ad8433604051918252600160a060020a031660208201526040908101905180910390a2505050565b6004602052600090815260409020546001604060020a031681565b600154600160a060020a031681565b60105481565b600080611608612ebd565b611610612ecf565b6000858152600960205260409081902090606090519081016040908152825460ff81161515835261010090819004600160a060020a0316602080850191909152600180860180549596958588019591946002938216150260001901169190910491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156116ee5780601f106116c3576101008083540402835291602001916116ee565b820191906000526020600020905b8154815290600101906020018083116116d157829003601f168201915b5050505050815250509050806000015181602001518260400151919790965090945092505050565b61171e612ebd565b60408051908101604052601081527f5343414654444453444453797374656d000000000000000000000000000000006020820152905090565b6000806000611766338c6126b4565b15156117a257600080516020612f3083398151915260405160a960020a6a2727aa2fa6a0a720a3a2a902815260200160405180910390a1611a69565b6117cc337f414654444453416464446f63756d656e74000000000000000000000000000000612551565b151561180557600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a1611a69565b88600160a060020a031663985e0dfb89898960405160e060020a63ffffffff8616028152600481019390935260248301919091526001604060020a03166044820152606401602060405180830381600087803b151561186357600080fd5b5af1151561187057600080fd5b5050506040518051905092506118868b86612cc5565b600160a060020a038b16600090815260056020908152604080832088845290915290819020805467ffffffffffffffff19166001604060020a038516179055919350915060c09051908101604052806040805190810160409081528e825260e860020a624e455702602080840191909152918352910190805190810160409081528d825260e860020a624e4557026020808401919091529183526001604060020a0380861684840152600160a060020a038e168483015260608401889052608090930188905291851660009081526006909152208151818151815560208201516001909101555060208201516002820181518155602082015160019091015550604082015160048201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160040160086101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816005015560a0820151816006019080516119ff929160200190612e3f565b508b91508c90507f8d17d8496bfd69e8fcf6b5804974b5e1ab215910b67be33e0871002c20234d1184848d886040516001604060020a039485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a35b5050505050505050505050565b600254600160a060020a031681565b6000546101009004600160a060020a031681565b60007f414654444453416464446f63756d656e7400000000000000000000000000000083611ac733826126b4565b1515611b0357600080516020612f3083398151915260405160a960020a6a2727aa2fa6a0a720a3a2a902815260200160405180910390a1610d9b565b611b0d3383612551565b1515611b4657600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a1610d9b565b8484604051918252602082015260409081019051809103902092506040805190810160409081526003805460016001604060020a0360a060020a80840482168301821690810260a060020a67ffffffffffffffff021990941693909317909355908452600089815260046020908152848220805480861690940190941667ffffffffffffffff199093168317909355828501919091528681526007909152208151815467ffffffffffffffff19166001604060020a0391909116178155602082015181546001604060020a0391909116604060020a026fffffffffffffffff000000000000000019909116179055505050505050565b600080600084846040519182526020820152604090810190519081900390206000908152600760205260409020546001604060020a0380821697604060020a9092041695509350505050565b6000807f4146544444534164644163636f756e740000000000000000000000000000000088611cb733826126b4565b1515611cf357600080516020612f3083398151915260405160a960020a6a2727aa2fa6a0a720a3a2a902815260200160405180910390a1611fe5565b611cfd3383612551565b1515611d3657600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a1611fe5565b60008a8152600c602090815260408083208b8452909152902054600160a060020a031615611da357600080516020612f308339815191526040517f4143434f554e545f414c52454144595f45584953540000000000000000000000815260200160405180910390a1611fe5565b898714801590611dcd575060008a8152600a602090815260408083208a845290915290205460ff16155b8015611de8575060008781526009602052604090205460ff16155b15611e2057600080516020612f30833981519152604051600080516020612f50833981519152815260200160405180910390a1611fe5565b600b54600160a060020a031663a8288d308d8d308e8e8e8e8e8e60405160e060020a63ffffffff8c16028152600160a060020a03808b16600483019081528a82166024840152908916604483015260648201889052600160c060020a03198716608483015260a4820186905260c48201859052610104820183905261012060e4830190815290916101240184818151815260200191508051906020019080838360005b83811015611edb578082015183820152602001611ec3565b50505050905090810190601f168015611f085780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b1515611f2e57600080fd5b5af11515611f3b57600080fd5b505050604051805160008c8152600c602090815260408083208d8452909152908190208054600160a060020a031916600160a060020a0384161790559094508b91507fabd8e8117664849ee708b0ef03630f40ebf3577283ed8462e8f2a379d3c7f1ad908590517f6164644163636f756e74000000000000000000000000000000000000000000008152600160a060020a0390911660208201526040908101905180910390a28293505b50505098975050505050505050565b858561200033826126b4565b151561203c57600080516020612f3083398151915260405160a960020a6a2727aa2fa6a0a720a3a2a902815260200160405180910390a1610d97565b6120463383612551565b151561207f57600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a1610d97565b6120888761097f565b15156120c157600080516020612f30833981519152604051600080516020612f10833981519152815260200160405180910390a1610d97565b7f4146544444534164644465706f6e656e74000000000000000000000000000000881415612142576120f38787610fe5565b1561213d57600080516020612f308339815191526040517f4f5247414e495a4154494f4e5f414c52454144595f4558495354000000000000815260200160405180910390a1610d97565b61228d565b7f414654444453456469744465706f6e656e7400000000000000000000000000008814156121ad576121748787610fe5565b151561213d57600080516020612f30833981519152604051600080516020612f50833981519152815260200160405180910390a1610d97565b7f41465444445352656d6f76654465706f6e656e74000000000000000000000000881415612254576121df8787610fe5565b151561221857600080516020612f30833981519152604051600080516020612f50833981519152815260200160405180910390a1610d97565b6000878152600a6020908152604080832089845290915281208054600160a860020a03191681559061224d6001830182612df8565b5050610d97565b600080516020612f30833981519152604051609160020a6d2aa725a727aba72fa0a1aa24a7a702815260200160405180910390a1610d97565b600880546fffffffffffffffff0000000000000000198116604060020a918290046001604060020a0390811660018101909116909202179091557f3d5f5c4848e129ccc15908bd033e41246c8cc054ada7b0568f6a8adc4201ac50908989896040516001604060020a039094168452602084019290925260408084019190915260608301919091526080909101905180910390a160606040519081016040528060011515815260200186600160a060020a0316815260200185858080601f0160208091040260200160405190810160405281815292919060208401838380828437505050929093525050506000888152600a602090815260408083208a845290915290208151815460ff191690151517815560208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181600101908051611a69929160200190612e3f565b6123e8612ebd565b604080519081016040526005815260d860020a64302e322e37026020820152905090565b600154600160a060020a03161561242257600080fd5b61242a612dc7565b565b600080612437612ebd565b61243f612ecf565b6000868152600a602090815260408083208884529091529081902090606090519081016040908152825460ff81161515835261010090819004600160a060020a0316602080850191909152600180860180549596958588019591946002938216150260001901169190910491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156125285780601f106124fd57610100808354040283529160200191612528565b820191906000526020600020905b81548152906001019060200180831161250b57829003601f168201915b505050505081525050905080600001518160200151826040015191955093509150509250925092565b600254600354600091600160a060020a039081169163fa34772d918691168560405160e060020a63ffffffff8616028152600160a060020a03938416600482015291909216602482015260448101919091527f4465706f7369746f7279000000000000000000000000000000000000000000006064820152608401602060405180830381600087803b151561136957600080fd5b60096020908152600091825260409182902080546001808301805460ff84169661010094859004600160a060020a031696929460029483161502600019019091169290920491601f83018290048202909101905190810160405280929190818152602001828054600181600116156101000203166002900480156126aa5780601f1061267f576101008083540402835291602001916126aa565b820191906000526020600020905b81548152906001019060200180831161268d57829003601f168201915b5050505050905083565b6002546000908290600160a060020a0316630fe6b9498560405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561270957600080fd5b5af1151561271657600080fd5b505050604051805191909114949350505050565b600a60209081526000928352604080842082529183529181902080546001808301805460ff84169661010094859004600160a060020a031696929460029483161502600019019091169290920491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156126aa5780601f1061267f576101008083540402835291602001916126aa565b6000806127d5612ebd565b600160a060020a038516600090815260056020908152604080832087845290915290205461280b906001604060020a0316611386565b9250925092509250925092565b60005460ff1681565b60008060006128833389600160a060020a0316631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561286757600080fd5b5af1151561287457600080fd5b505050604051805190506126b4565b1580156128ce57506128cc3387600160a060020a0316631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561286757600080fd5b155b1561290957600080516020612f3083398151915260405160a960020a6a2727aa2fa6a0a720a3a2a902815260200160405180910390a1612cb6565b612933337f4146544444534164644d6f727467616765000000000000000000000000000000612551565b151561296c57600080516020612f30833981519152604051600080516020612f70833981519152815260200160405180910390a1612cb6565b886040518082805190602001908083835b6020831061299c5780518252601f19909201916020918201910161297d565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390206000818152600e6020526040902054909250600160a060020a031615612a2e57600080516020612f308339815191526040517f4d4f5254474147455f414c52454144595f455849535400000000000000000000815260200160405180910390a1612cb6565b600f54600160a060020a0316634184a0d48d8d308d8d8d8d8d8d60405160e060020a63ffffffff8c16028152600160a060020a03808b16600483019081528a821660248401528982166044840152878216608484015286821660a484015285821660c484015290841660e48301526101206064830190815290916101048101906101240189818151815260200191508051906020019080838360005b83811015612ae2578082015183820152602001612aca565b50505050905090810190601f168015612b0f5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612b45578082015183820152602001612b2d565b50505050905090810190601f168015612b725780820380516001836020036101000a031916815260200191505b509b505050505050505050505050602060405180830381600087803b1515612b9957600080fd5b5af11515612ba657600080fd5b5050506040518051600160a060020a0381166000818152600d60209081526040808320889055878352600e909152908190208054600160a060020a031916909217909155600f80546001604060020a0360a060020a8083048216600181810190931690910260a060020a67ffffffffffffffff0219909316929092179092559294507f0f4406760287c5f715d41b8d9b6842a6b1271563bc313efb6b5946cfcefaafeb935084918e9190516001604060020a0394851681527f6164644d6f7274676167650000000000000000000000000000000000000000006020820152600160a060020a039093166040808501919091526060840192909252909216608082015260a001905180910390a18092505b50509998505050505050505050565b600080600080600086866040519182526020820152604090810190519081900390206000818152600760205260408120549194506001604060020a039091161115612d52575050600081815260076020526040902080546fffffffffffffffffffffffffffffffff1981169091556001604060020a038082169450604060020a9091041691508282612dbd565b6003805460016001604060020a0360a060020a8084048216830180831690910260a060020a67ffffffffffffffff02199094169390931790935560008a8152600460205260409020805480851690920193841667ffffffffffffffff19909216919091179055955093505b5050509250929050565b60005460ff1615156001148015612de15750612de1610f03565b1515612dec57600080fd5b6000805460ff19169055565b50805460018160011615610100020316600290046000825580601f10612e1e5750612e3c565b601f016020900490600052602060002090810190612e3c9190612ef5565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e8057805160ff1916838001178555612ead565b82800160010185558215612ead579182015b82811115612ead578251825591602001919060010190612e92565b50612eb9929150612ef5565b5090565b60206040519081016040526000815290565b60606040519081016040908152600080835260208301528101612ef0612ebd565b905290565b610f7391905b80821115612eb95760008155600101612efb56004f5247414e495a4154494f4e5f4e4f545f4558495354000000000000000000009f00b5a6056fd0ff1073a0998040602f195b2b110e12fa9d19437150cf3fcedf4445504f4e454e545f4e4f545f45584953540000000000000000000000000000524f4c455f4d4f44454c5f4e4f545f414c4c4f57000000000000000000000000a165627a7a72305820cf0f197a74601e315910862ab2109404e258189b1e6ea5e10d13567d9d8d4eaf0029";

    public static final String FUNC_ORGISEXIST = "orgIsExist";

    public static final String FUNC_EDITORGANIZATION = "editOrganization";

    public static final String FUNC_SETDOCSTATUS = "setDocStatus";

    public static final String FUNC_EMITMORTGAGEEVENT = "emitMortgageEvent";

    public static final String FUNC_ROLEMODEL = "roleModel";

    public static final String FUNC_CANDISABLE = "canDisable";

    public static final String FUNC_GETORGID = "getOrgId";

    public static final String FUNC_DEPONENTISEXIST = "deponentIsExist";

    public static final String FUNC_DISABLE = "disable";

    public static final String FUNC_GLOBALDOCCOUNTER = "globalDocCounter";

    public static final String FUNC_GETMORTGAGEBYNUMBER = "getMortgageByNumber";

    public static final String FUNC_GETACCOUNT = "getAccount";

    public static final String FUNC_UPGRADEWITH = "upgradeWith";

    public static final String FUNC_CHECKAFTPERMISSIONS = "checkAftPermissions";

    public static final String FUNC_GETDOCINFO = "getDocInfo";

    public static final String FUNC_EMITACCOUNTEVENT = "emitAccountEvent";

    public static final String FUNC_ORGANIZATIONDOCCOUNTER = "organizationDocCounter";

    public static final String FUNC_SUCCESSOR = "successor";

    public static final String FUNC_STARTATBLOCK = "startAtBlock";

    public static final String FUNC_GETORGINFO = "getOrgInfo";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NEWDOCUMENT = "newDocument";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_PRECURSOR = "precursor";

    public static final String FUNC_RESERVECOUNTERS = "reserveCounters";

    public static final String FUNC_GETRESERVEDCOUNTERS = "getReservedCounters";

    public static final String FUNC_ADDACCOUNT = "addAccount";

    public static final String FUNC_EDITDEPONENT = "editDeponent";

    public static final String FUNC_CONTRACTVERSION = "contractVersion";

    public static final String FUNC_ENABLE = "enable";

    public static final String FUNC_GETDEPONENTORGINFO = "getDeponentOrgInfo";

    public static final String FUNC_CHECKPERMISSIONS = "checkPermissions";

    public static final String FUNC_ORGANIZATIONS = "organizations";

    public static final String FUNC_CHECKUSERORG = "checkUserOrg";

    public static final String FUNC_DEPONENTS = "deponents";

    public static final String FUNC_DISABLED = "disabled";

    public static final String FUNC_ADDMORTGAGE = "addMortgage";

    public static final Event MORTGAGEEVENT_EVENT = new Event("MortgageEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event ACCOUNTEVENT_EVENT = new Event("AccountEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ORGANIZATIONEVENT_EVENT = new Event("OrganizationEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event DEPONENTEVENT_EVENT = new Event("DeponentEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event DOCUMENTEVENT_EVENT = new Event("DocumentEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ERROREVENT_EVENT = new Event("ErrorEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected DDSystem(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DDSystem(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DDSystem(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DDSystem(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> orgIsExist(byte[] orgId) {
        final Function function = new Function(FUNC_ORGISEXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> editOrganization(byte[] action, byte[] orgId, String container, byte[] meta) {
        final Function function = new Function(
                FUNC_EDITORGANIZATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(action), 
                new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.DynamicBytes(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDocStatus(String container, BigInteger archiveId, byte[] status) {
        final Function function = new Function(
                FUNC_SETDOCSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.generated.Uint256(archiveId), 
                new org.web3j.abi.datatypes.generated.Bytes32(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> emitMortgageEvent(byte[] action, byte[] documentLink, BigInteger version) {
        final Function function = new Function(
                FUNC_EMITMORTGAGEEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(action), 
                new org.web3j.abi.datatypes.generated.Bytes32(documentLink), 
                new org.web3j.abi.datatypes.generated.Uint64(version)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> roleModel() {
        final Function function = new Function(FUNC_ROLEMODEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> canDisable() {
        final Function function = new Function(FUNC_CANDISABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> getOrgId(String userId) {
        final Function function = new Function(FUNC_GETORGID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Boolean> deponentIsExist(byte[] orgId, byte[] deponentOrgId) {
        final Function function = new Function(FUNC_DEPONENTISEXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(deponentOrgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> disable() {
        final Function function = new Function(
                FUNC_DISABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> globalDocCounter() {
        final Function function = new Function(FUNC_GLOBALDOCCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getMortgageByNumber(byte[] number) {
        final Function function = new Function(FUNC_GETMORTGAGEBYNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAccount(byte[] orgId, byte[] number) {
        final Function function = new Function(FUNC_GETACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> upgradeWith(String _successor) {
        final Function function = new Function(
                FUNC_UPGRADEWITH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_successor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDocStatus(BigInteger docId, byte[] status) {
        final Function function = new Function(
                FUNC_SETDOCSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(docId), 
                new org.web3j.abi.datatypes.generated.Bytes32(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> checkAftPermissions(String userId, byte[] modifierId) {
        final Function function = new Function(FUNC_CHECKAFTPERMISSIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId), 
                new org.web3j.abi.datatypes.generated.Bytes32(modifierId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple3<byte[], byte[], byte[]>> getDocInfo(BigInteger docId) {
        final Function function = new Function(FUNC_GETDOCINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(docId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<byte[], byte[], byte[]>>(
                new Callable<Tuple3<byte[], byte[], byte[]>>() {
                    @Override
                    public Tuple3<byte[], byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> emitAccountEvent(byte[] action) {
        final Function function = new Function(
                FUNC_EMITACCOUNTEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(action)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> organizationDocCounter(byte[] param0) {
        final Function function = new Function(FUNC_ORGANIZATIONDOCCOUNTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> successor() {
        final Function function = new Function(FUNC_SUCCESSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> startAtBlock() {
        final Function function = new Function(FUNC_STARTATBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<Boolean, String, byte[]>> getOrgInfo(byte[] orgId) {
        final Function function = new Function(FUNC_GETORGINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<Boolean, String, byte[]>>(
                new Callable<Tuple3<Boolean, String, byte[]>>() {
                    @Override
                    public Tuple3<Boolean, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, byte[]>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> contractName() {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> newDocument(byte[] orgId, byte[] counterOrgId, String container, byte[] modifierId, byte[] hmac, BigInteger expiry, byte[] reserveId, byte[] meta) {
        final Function function = new Function(
                FUNC_NEWDOCUMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(counterOrgId), 
                new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.generated.Bytes32(modifierId), 
                new org.web3j.abi.datatypes.generated.Bytes32(hmac), 
                new org.web3j.abi.datatypes.generated.Uint64(expiry), 
                new org.web3j.abi.datatypes.generated.Bytes32(reserveId), 
                new org.web3j.abi.datatypes.DynamicBytes(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> registry() {
        final Function function = new Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> precursor() {
        final Function function = new Function(FUNC_PRECURSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> reserveCounters(byte[] orgId, byte[] reserveId) {
        final Function function = new Function(
                FUNC_RESERVECOUNTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(reserveId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getReservedCounters(byte[] orgId, byte[] reserveId) {
        final Function function = new Function(FUNC_GETRESERVEDCOUNTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(reserveId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAccount(String precursor, String container, byte[] orgId, byte[] accType, byte[] number, byte[] deponent, byte[] meta, byte[] documentLink) {
        final Function function = new Function(
                FUNC_ADDACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(precursor), 
                new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes8(accType), 
                new org.web3j.abi.datatypes.generated.Bytes32(number), 
                new org.web3j.abi.datatypes.generated.Bytes32(deponent), 
                new org.web3j.abi.datatypes.DynamicBytes(meta), 
                new org.web3j.abi.datatypes.generated.Bytes32(documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> editDeponent(byte[] action, byte[] orgId, byte[] deponentOrgId, String container, byte[] meta) {
        final Function function = new Function(
                FUNC_EDITDEPONENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(action), 
                new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(deponentOrgId), 
                new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.DynamicBytes(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> contractVersion() {
        final Function function = new Function(FUNC_CONTRACTVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> enable() {
        final Function function = new Function(
                FUNC_ENABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<Boolean, String, byte[]>> getDeponentOrgInfo(byte[] orgId, byte[] deponentOrgId) {
        final Function function = new Function(FUNC_GETDEPONENTORGINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(orgId), 
                new org.web3j.abi.datatypes.generated.Bytes32(deponentOrgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<Boolean, String, byte[]>>(
                new Callable<Tuple3<Boolean, String, byte[]>>() {
                    @Override
                    public Tuple3<Boolean, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, byte[]>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> checkPermissions(String userId, byte[] modifierId) {
        final Function function = new Function(FUNC_CHECKPERMISSIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId), 
                new org.web3j.abi.datatypes.generated.Bytes32(modifierId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple3<Boolean, String, byte[]>> organizations(byte[] param0) {
        final Function function = new Function(FUNC_ORGANIZATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<Boolean, String, byte[]>>(
                new Callable<Tuple3<Boolean, String, byte[]>>() {
                    @Override
                    public Tuple3<Boolean, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, byte[]>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> checkUserOrg(String userId, byte[] orgId) {
        final Function function = new Function(FUNC_CHECKUSERORG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userId), 
                new org.web3j.abi.datatypes.generated.Bytes32(orgId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple3<Boolean, String, byte[]>> deponents(byte[] param0, byte[] param1) {
        final Function function = new Function(FUNC_DEPONENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Bytes32(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<Boolean, String, byte[]>>(
                new Callable<Tuple3<Boolean, String, byte[]>>() {
                    @Override
                    public Tuple3<Boolean, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, byte[]>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<byte[], byte[], byte[]>> getDocInfo(String container, BigInteger archiveId) {
        final Function function = new Function(FUNC_GETDOCINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.generated.Uint256(archiveId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple3<byte[], byte[], byte[]>>(
                new Callable<Tuple3<byte[], byte[], byte[]>>() {
                    @Override
                    public Tuple3<byte[], byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> disabled() {
        final Function function = new Function(FUNC_DISABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addMortgage(String precursor, String container, byte[] documentLink, byte[] number, String _custodyAsset, String _custodyLiability, String _accountingAsset, String _accountingLiability, byte[] meta) {
        final Function function = new Function(
                FUNC_ADDMORTGAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(precursor), 
                new org.web3j.abi.datatypes.Address(container), 
                new org.web3j.abi.datatypes.generated.Bytes32(documentLink), 
                new org.web3j.abi.datatypes.DynamicBytes(number), 
                new org.web3j.abi.datatypes.Address(_custodyAsset), 
                new org.web3j.abi.datatypes.Address(_custodyLiability), 
                new org.web3j.abi.datatypes.Address(_accountingAsset), 
                new org.web3j.abi.datatypes.Address(_accountingLiability), 
                new org.web3j.abi.datatypes.DynamicBytes(meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<MortgageEventEventResponse> getMortgageEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MORTGAGEEVENT_EVENT, transactionReceipt);
        ArrayList<MortgageEventEventResponse> responses = new ArrayList<MortgageEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MortgageEventEventResponse typedResponse = new MortgageEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.mortgage = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.documentLink = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MortgageEventEventResponse> mortgageEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MortgageEventEventResponse>() {
            @Override
            public MortgageEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MORTGAGEEVENT_EVENT, log);
                MortgageEventEventResponse typedResponse = new MortgageEventEventResponse();
                typedResponse.log = log;
                typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.mortgage = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.documentLink = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MortgageEventEventResponse> mortgageEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MORTGAGEEVENT_EVENT));
        return mortgageEventEventFlowable(filter);
    }

    public List<AccountEventEventResponse> getAccountEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTEVENT_EVENT, transactionReceipt);
        ArrayList<AccountEventEventResponse> responses = new ArrayList<AccountEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountEventEventResponse typedResponse = new AccountEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.orgId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountEventEventResponse> accountEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AccountEventEventResponse>() {
            @Override
            public AccountEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTEVENT_EVENT, log);
                AccountEventEventResponse typedResponse = new AccountEventEventResponse();
                typedResponse.log = log;
                typedResponse.orgId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountEventEventResponse> accountEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTEVENT_EVENT));
        return accountEventEventFlowable(filter);
    }

    public List<OrganizationEventEventResponse> getOrganizationEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORGANIZATIONEVENT_EVENT, transactionReceipt);
        ArrayList<OrganizationEventEventResponse> responses = new ArrayList<OrganizationEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrganizationEventEventResponse typedResponse = new OrganizationEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orgId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrganizationEventEventResponse> organizationEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrganizationEventEventResponse>() {
            @Override
            public OrganizationEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORGANIZATIONEVENT_EVENT, log);
                OrganizationEventEventResponse typedResponse = new OrganizationEventEventResponse();
                typedResponse.log = log;
                typedResponse.action = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orgId = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrganizationEventEventResponse> organizationEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORGANIZATIONEVENT_EVENT));
        return organizationEventEventFlowable(filter);
    }

    public List<DeponentEventEventResponse> getDeponentEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPONENTEVENT_EVENT, transactionReceipt);
        ArrayList<DeponentEventEventResponse> responses = new ArrayList<DeponentEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeponentEventEventResponse typedResponse = new DeponentEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.orgId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.deponentOrgId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeponentEventEventResponse> deponentEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DeponentEventEventResponse>() {
            @Override
            public DeponentEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPONENTEVENT_EVENT, log);
                DeponentEventEventResponse typedResponse = new DeponentEventEventResponse();
                typedResponse.log = log;
                typedResponse.counter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.action = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.orgId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.deponentOrgId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeponentEventEventResponse> deponentEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPONENTEVENT_EVENT));
        return deponentEventEventFlowable(filter);
    }

    public List<DocumentEventEventResponse> getDocumentEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DOCUMENTEVENT_EVENT, transactionReceipt);
        ArrayList<DocumentEventEventResponse> responses = new ArrayList<DocumentEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DocumentEventEventResponse typedResponse = new DocumentEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.organization = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.counterparty = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.globalCounter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.organizationCounter = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.container = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.archiveId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DocumentEventEventResponse> documentEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DocumentEventEventResponse>() {
            @Override
            public DocumentEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DOCUMENTEVENT_EVENT, log);
                DocumentEventEventResponse typedResponse = new DocumentEventEventResponse();
                typedResponse.log = log;
                typedResponse.organization = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.counterparty = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.globalCounter = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.organizationCounter = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.container = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.archiveId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DocumentEventEventResponse> documentEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOCUMENTEVENT_EVENT));
        return documentEventEventFlowable(filter);
    }

    public List<ErrorEventEventResponse> getErrorEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERROREVENT_EVENT, transactionReceipt);
        ArrayList<ErrorEventEventResponse> responses = new ArrayList<ErrorEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorEventEventResponse typedResponse = new ErrorEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.errorDetails = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorEventEventResponse> errorEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorEventEventResponse>() {
            @Override
            public ErrorEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERROREVENT_EVENT, log);
                ErrorEventEventResponse typedResponse = new ErrorEventEventResponse();
                typedResponse.log = log;
                typedResponse.errorDetails = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorEventEventResponse> errorEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERROREVENT_EVENT));
        return errorEventEventFlowable(filter);
    }

    @Deprecated
    public static DDSystem load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDSystem(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DDSystem load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DDSystem(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DDSystem load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DDSystem(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DDSystem load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DDSystem(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DDSystem> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _precursor, String registry, String roleModel, String accFactory, String mgFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(registry), 
                new org.web3j.abi.datatypes.Address(roleModel), 
                new org.web3j.abi.datatypes.Address(accFactory), 
                new org.web3j.abi.datatypes.Address(mgFactory)));
        return deployRemoteCall(DDSystem.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DDSystem> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _precursor, String registry, String roleModel, String accFactory, String mgFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(registry), 
                new org.web3j.abi.datatypes.Address(roleModel), 
                new org.web3j.abi.datatypes.Address(accFactory), 
                new org.web3j.abi.datatypes.Address(mgFactory)));
        return deployRemoteCall(DDSystem.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DDSystem> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _precursor, String registry, String roleModel, String accFactory, String mgFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(registry), 
                new org.web3j.abi.datatypes.Address(roleModel), 
                new org.web3j.abi.datatypes.Address(accFactory), 
                new org.web3j.abi.datatypes.Address(mgFactory)));
        return deployRemoteCall(DDSystem.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DDSystem> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _precursor, String registry, String roleModel, String accFactory, String mgFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(registry), 
                new org.web3j.abi.datatypes.Address(roleModel), 
                new org.web3j.abi.datatypes.Address(accFactory), 
                new org.web3j.abi.datatypes.Address(mgFactory)));
        return deployRemoteCall(DDSystem.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class MortgageEventEventResponse {
        public Log log;

        public BigInteger counter;

        public byte[] action;

        public String mortgage;

        public byte[] documentLink;

        public BigInteger version;
    }

    public static class AccountEventEventResponse {
        public Log log;

        public byte[] orgId;

        public byte[] action;

        public String account;
    }

    public static class OrganizationEventEventResponse {
        public Log log;

        public byte[] action;

        public byte[] orgId;

        public BigInteger counter;
    }

    public static class DeponentEventEventResponse {
        public Log log;

        public BigInteger counter;

        public byte[] action;

        public byte[] orgId;

        public byte[] deponentOrgId;
    }

    public static class DocumentEventEventResponse {
        public Log log;

        public byte[] organization;

        public byte[] counterparty;

        public BigInteger globalCounter;

        public BigInteger organizationCounter;

        public String container;

        public BigInteger archiveId;
    }

    public static class ErrorEventEventResponse {
        public Log log;

        public byte[] errorDetails;
    }
}
