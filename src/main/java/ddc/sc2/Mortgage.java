package ddc.sc2;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class Mortgage extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b604051620041573803806200415783398101604052808051919060200180519190602001805191906020018051820191906020018051919060200180519190602001805191906020018051919060200180519091019050620000716200042c565b888a600160a060020a03811615620000fd5780600160a060020a031663589bfb59306040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620000eb57600080fd5b5af11515620000f957600080fd5b5050505b6000805461010060a860020a031916610100600160a060020a03938416021790556002805474010000000000000000000000000000000000000000600160a060020a0319909116939092169290921760a060020a60e060020a0319161790556003878051620001719291602001906200047c565b5060088054600160a060020a031916600160a060020a038a1617905560a06040519081016040528060606040519081016040528089600160a060020a0316815260200188600160a060020a031681526020017f32333030303000000000000000000000000000000000000000000000000000006001608060020a031916815250815260200160606040519081016040528087600160a060020a0316815260200186600160a060020a031681526020017f32333030303000000000000000000000000000000000000000000000000000006001608060020a03191681525081526020017f424c4f434b4544000000000000000000000000000000000000000000000000006000191681526020018381526020016000604051805910620002935750595b8181526020918202810182016040908152925260025474010000000000000000000000000000000000000000900467ffffffffffffffff166000908152600490915220909150819081518181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a0319167001000000000000000000000000000000009092049190911790555060208201516003820181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a0319167001000000000000000000000000000000009092049190911790555060408201516006820155606082015181600701908051620003fb9291602001906200047c565b506080820151816008019080516200041892916020019062000501565b509050505050505050505050505062000593565b610120604051908101604052806200044362000541565b81526020016200045262000541565b8152600060208201526040016200046862000561565b81526020016200047762000561565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004bf57805160ff1916838001178555620004ef565b82800160010185558215620004ef579182015b82811115620004ef578251825591602001919060010190620004d2565b50620004fd92915062000573565b5090565b828054828255906000526020600020908101928215620004ef579160200282015b82811115620004ef578251825560209092019160019091019062000522565b606060405190810160409081526000808352602083018190529082015290565b60206040519081016040526000815290565b6200059091905b80821115620004fd57600081556001016200057a565b90565b613bb480620005a36000396000f3006060604052600436106101035763ffffffff60e060020a60003504166309bd36cb81146101085780630db4e7b21461014d5780631ef925781461016857806325373afd1461018f5780632f2770db146101a85780633a0d468c146101bb578063589bfb591461036d5780636ff968c31461038c57806375d0c0dc146103bb57806379410814146104455780637f2a80611461048f5780637fbccfc6146104b4578063840d1d98146104c7578063866160e0146104da5780638ca4800d146104ed57806390e534a71461050f57806391ce170a146105225780639e1f68c71461054b578063a0a8e4601461057d578063a3907d7114610590578063ee070805146105a3575b600080fd5b341561011357600080fd5b61013b6004803590602480356001604060020a031691604435916064359081019101356105b6565b60405190815260200160405180910390f35b341561015857600080fd5b610166600435602435610c47565b005b341561017357600080fd5b61017b610f2d565b604051901515815260200160405180910390f35b341561019a57600080fd5b6101666004356024356110ae565b34156101b357600080fd5b610166611575565b34156101c657600080fd5b6101da6001604060020a03600435166115a7565b6040516001604060020a038d168152600160a060020a03808c1660408301528a8116606083015289811660808301526001608060020a0319808a1660a084015288821660c084015290871660e083015285166101008201526101208101849052610180602082018181529061014083019061016084019084018f818151815260200191508051906020019080838360005b8381101561028357808201518382015260200161026b565b50505050905090810190601f1680156102b05780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156102e65780820151838201526020016102ce565b50505050905090810190601f1680156103135780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b8381101561034c578082015183820152602001610334565b505050509050019f5050505050505050505050505050505060405180910390f35b341561037857600080fd5b610166600160a060020a036004351661192a565b341561039757600080fd5b61039f611954565b604051600160a060020a03909116815260200160405180910390f35b34156103c657600080fd5b6103ce611963565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561040a5780820151838201526020016103f2565b50505050905090810190601f1680156104375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045057600080fd5b610166600160a060020a036004358116906024358116906001608060020a03196044358116916064358116916084359091169060a4351660c4356119a4565b341561049a57600080fd5b6101666004356024356001604060020a0360443516612654565b34156104bf57600080fd5b61039f6129a7565b34156104d257600080fd5b61013b6129bb565b34156104e557600080fd5b61013b6129c1565b34156104f857600080fd5b6101666001604060020a03600435166024356129c7565b341561051a57600080fd5b61039f612f0d565b341561052d57600080fd5b6101666001608060020a031960043581169060243516604435612f1c565b341561055657600080fd5b6105616004356137cd565b6040516001604060020a03909116815260200160405180910390f35b341561058857600080fd5b6103ce6137e8565b341561059b57600080fd5b610166613814565b34156105ae57600080fd5b61017b613834565b60025460a060020a90046001604060020a03166000908152600460205260408120600101548190600160a060020a031615801590610621575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b15610c0e5760025460a060020a90046001604060020a0316600090815260046020526040808220600101547f41465444445341646441677265656d656e7400000000000000000000000000009291600160a060020a0390911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106ad57600080fd5b5af115156106ba57600080fd5b5050506040518051600854909250600160a060020a0316905063ce142687338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561071d57600080fd5b5af1151561072a57600080fd5b50505060405180519050151561077f57600080516020613b098339815191526040517f4e4f545f435553544f44595f4d414e4147455200000000000000000000000000815260200160405180910390a1610c07565b600854600160a060020a031663b36a9a7c338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107d557600080fd5b5af115156107e257600080fd5b50505060405180519050151561082557600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a1610c07565b6000898152600560205260409020546001604060020a03161561088757600080516020613b098339815191526040517f41475245454d454e545f4e554d4245525f414c52454144595f45584953540000815260200160405180910390a1610c07565b60008981526005602052604090819020805467ffffffffffffffff19166001604060020a038b811691909117909155600854600254600160a060020a039091169263090dbda9928b9260a060020a900416905160e060020a63ffffffff851602815260a260020a6b1b59d4d958dd1119591d58dd02600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561093357600080fd5b5af1151561094057600080fd5b50506002546000196001604060020a0360a060020a909204821601166000908152600460205260409020600881018054919550915060018101610983838261386e565b5060009182526020909120018990556109a0600784018787613897565b506002805460016001604060020a0360a060020a8084048216830190911690810260a060020a67ffffffffffffffff0219909316929092178355600091825260046020819052604090922086548154600160a060020a0319908116600160a060020a039283161783558389015483850180548316918416919091179055858901548387018054608060020a9283028390046001608060020a0319918216179091556003808c015490860180548516918616919091179055868b015496850180549093169690931695909517905560058089015490830180549186029590950491161790925560068087015490830155600780870180548895610ab49493860193821615610100026000190190911604613915565b5060088281018054610ac9928401919061398a565b5050600854600254600160a060020a03909116915063090dbda990899060a060020a90046001604060020a031660405160e060020a63ffffffff851602815260a260020a6b1b59d4d958dd115b9c9bdb1b02600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b1515610b5257600080fd5b5af11515610b5f57600080fd5b5050600854600254600160a060020a03909116915063090dbda990899060a060020a90046001604060020a031660405160e060020a63ffffffff85160281527f6d6741646441677265656d656e74000000000000000000000000000000000000600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b1515610bf657600080fd5b5af11515610c0357600080fd5b5050505b5050610c3d565b600080516020613b09833981519152604051600080516020613b29833981519152815260200160405180910390a15b5095945050505050565b60025460a060020a90046001604060020a0316600090815260046020526040902060010154600160a060020a031615801590610cb0575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b15610efa5760025460a060020a90046001604060020a0316600090815260046020526040808220600101547f414654444453526564656d7074696f6e000000000000000000000000000000009291600160a060020a0390911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d3c57600080fd5b5af11515610d4957600080fd5b5050506040518051600854909250600160a060020a0316905063ce142687338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610dac57600080fd5b5af11515610db957600080fd5b505050604051805190501515610e0e57600080516020613b098339815191526040517f4e4f545f435553544f44595f4d414e4147455200000000000000000000000000815260200160405180910390a1610ef3565b600854600160a060020a031663b36a9a7c338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e6457600080fd5b5af11515610e7157600080fd5b505050604051805190501515610eb457600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a1610ef3565b6006849055610ee37f414e4e554c4c4544000000000000000000000000000000000000000000000000846110ae565b610ef360008080808080896119a4565b5050610f29565b600080516020613b09833981519152604051600080516020613b29833981519152815260200160405180910390a15b5050565b60085460025460a060020a90046001604060020a0316600090815260046020526040808220600101549192600160a060020a039081169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fa257600080fd5b5af11515610faf57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ffc57600080fd5b5af1151561100957600080fd5b5050506040518051905080156110a85750600854600160a060020a031663b36a9a7c3360405160e060020a63ffffffff8416028152600160a060020a0390911660048201527f41465444445344697361626c65436f6e746163740000000000000000000000006024820152604401602060405180830381600087803b151561109057600080fd5b5af1151561109d57600080fd5b505050604051805190505b90505b90565b60025460a060020a90046001604060020a0316600090815260046020526040902060010154600160a060020a031615801590611117575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b15610efa5760085460025460a060020a90046001604060020a031660009081526004602052604090819020600101547f4146544444534368616e67654d6f72746761676553746174757300000000000092600160a060020a039081169263ce1426879233921690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b15156111b057600080fd5b5af115156111bd57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561120a57600080fd5b5af1151561121757600080fd5b5050506040518051905015801561131157506008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561129e57600080fd5b5af115156112ab57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112f857600080fd5b5af1151561130557600080fd5b50505060405180519050155b1561134957600080516020613b09833981519152604051600080516020613b49833981519152815260200160405180910390a161156f565b600854600160a060020a031663b36a9a7c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561139f57600080fd5b5af115156113ac57600080fd5b5050506040518051905015156113ef57600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a161156f565b7f424c4f434b45445f464f525f5452414e5346455200000000000000000000000083148015611462575060025460a060020a90046001604060020a03166000908152600460205260409020600601547f415641494c41424c45000000000000000000000000000000000000000000000014155b156114ac57600080516020613b098339815191526040517f4e4f545f45585045435445445f53544154450000000000000000000000000000815260200160405180910390a161156f565b600280546001604060020a0360a060020a918290048116600090815260046020526040908190206006018790556008549354600160a060020a039094169363090dbda9938793910416905160e060020a63ffffffff85160281527f6d67436853746174757300000000000000000000000000000000000000000000600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561155e57600080fd5b5af1151561156b57600080fd5b5050505b50610f29565b60005460ff161561158557600080fd5b61158d610f2d565b151561159857600080fd5b6000805460ff19166001179055565b60006115b16139c9565b6000806000806000806000806115c56139c9565b6115cd6139c9565b6115d56139db565b6001604060020a038e1615156115ff5760025460a060020a90046001604060020a03169d50611639565b60008e6001604060020a031611801561162e57506002546001604060020a0360a060020a9091048116908f1611155b151561163957600080fd5b6001604060020a038e16600090815260046020526040908190209060a09051908101604052908160008201606060405190810160409081528254600160a060020a039081168352600184015416602080840191909152600290930154608060020a026001608060020a0319168183015290835291019060038301906060905190810160409081528254600160a060020a0390811683526001808501549091166020808501919091526002948501546001608060020a0319608060020a9091021683850152928552600686015485840152600786018054958301959094918116156101000260001901160491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156117a15780601f10611776576101008083540402835291602001916117a1565b820191906000526020600020905b81548152906001019060200180831161178457829003601f168201915b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156117fa57602002820191906000526020600020905b815481526001909101906020018083116117e5575b505050919092525050600254919250506001604060020a0360a060020a82041690600390600160a060020a031683515184516020015185516040015186602001515187602001516020015188602001516040015189604001518a606001518b608001518a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118f25780601f106118c7576101008083540402835291602001916118f2565b820191906000526020600020905b8154815290600101906020018083116118d557829003601f168201915b50505050509a508999508191508090509c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b611932611575565b60018054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a031681565b61196b6139c9565b60408051908101604052601081527f53434146544444534d6f727467616765000000000000000000000000000000006020820152905090565b6119ac6139db565b60025460a060020a90046001604060020a0316600090815260046020526040902060010154600160a060020a031615801590611a15575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b1561261b5760085460025460a060020a90046001604060020a031660009081526004602052604090819020600101547f4146544444534368616e67654163636f756e740000000000000000000000000092600160a060020a039081169263ce1426879233921690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611aae57600080fd5b5af11515611abb57600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611b0857600080fd5b5af11515611b1557600080fd5b50505060405180519050158015611c0f57506008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b9c57600080fd5b5af11515611ba957600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611bf657600080fd5b5af11515611c0357600080fd5b50505060405180519050155b15611c4757600080516020613b09833981519152604051600080516020613b49833981519152815260200160405180910390a1612615565b600854600160a060020a031663b36a9a7c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611c9d57600080fd5b5af11515611caa57600080fd5b505050604051805190501515611ced57600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a1612615565b600160a060020a03881615801590611db05750600854600160a060020a03908116906303325944908a16631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d4a57600080fd5b5af11515611d5757600080fd5b5050506040518051905060405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611d9757600080fd5b5af11515611da457600080fd5b50505060405180519050155b15611dfa57600080516020613b098339815191526040517f435553544f44595f4445504f5349544f52595f4e4f545f455849535400000000815260200160405180910390a1612615565b600160a060020a03851615801590611ebd5750600854600160a060020a03908116906303325944908716631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611e5757600080fd5b5af11515611e6457600080fd5b5050506040518051905060405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611ea457600080fd5b5af11515611eb157600080fd5b50505060405180519050155b15611f0757600080516020613b098339815191526040517f4143434f554e54494e475f4445504f5349544f52595f4e4f545f455849535400815260200160405180910390a1612615565b600160a060020a03851615801590611fef575060025460a060020a90046001604060020a03166000908152600460208190526040918290200154600160a060020a031690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611f7d57600080fd5b5af11515611f8a57600080fd5b50505060405180519050600160a060020a038616631730bdfe6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611fd157600080fd5b5af11515611fde57600080fd5b505050604051805190506000191614155b15612125576008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561206957600080fd5b5af1151561207657600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156120c357600080fd5b5af115156120d057600080fd5b50505060405180519050151561212557600080516020613b098339815191526040517f4e4f545f4143434f554e54494e475f4d414e4147455200000000000000000000815260200160405180910390a1612615565b600854600254600160a060020a039091169063090dbda990859060a060020a90046001604060020a031660405160e060020a63ffffffff85160281527f6d67416363744465647563740000000000000000000000000000000000000000600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b15156121b957600080fd5b5af115156121c657600080fd5b505060025460a060020a90046001604060020a031660009081526004602052604090819020915060a09051908101604052908160008201606060405190810160409081528254600160a060020a039081168352600184015416602080840191909152600290930154608060020a026001608060020a0319168183015290835291019060038301906060905190810160409081528254600160a060020a0390811683526001808501549091166020808501919091526002948501546001608060020a0319608060020a9091021683850152928552600686015485840152600786018054958301959094918116156101000260001901160491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561233a5780601f1061230f5761010080835404028352916020019161233a565b820191906000526020600020905b81548152906001019060200180831161231d57829003601f168201915b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561239357602002820191906000526020600020905b8154815260019091019060200180831161237e575b505050505081525050915060606040519081016040908152600160a060020a03808c1683528a1660208301526001608060020a0319891681830152908352606090519081016040908152600160a060020a03888116835287166020808401919091526001608060020a0319871682840152848101929092526002805460a060020a67ffffffffffffffff0219811660a060020a918290046001604060020a039081166001011691820217909155600090815260049092529020829081518181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a031916608060020a9092049190911790555060208201516003820181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a031916608060020a9092049190911790555060408201516006820155606082015181600701908051612552929160200190613a23565b5060808201518160080190805161256d929160200190613a91565b5050600854600254600160a060020a03909116915063090dbda990859060a060020a90046001604060020a031660405160e060020a63ffffffff85160281527f6d6741636374456e726f6c6c0000000000000000000000000000000000000000600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561260457600080fd5b5af1151561261157600080fd5b5050505b5061264a565b600080516020613b09833981519152604051600080516020613b29833981519152815260200160405180910390a15b5050505050505050565b60085460025460a060020a90046001604060020a031660009081526004602052604090819020600101547f41465444445353617665457874656e646564496e666f0000000000000000000092600160a060020a039081169263ce1426879233921690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b15156126e857600080fd5b5af115156126f557600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561274257600080fd5b5af1151561274f57600080fd5b5050506040518051905015801561284957506008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b15156127d657600080fd5b5af115156127e357600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561283057600080fd5b5af1151561283d57600080fd5b50505060405180519050155b1561288157600080516020613b09833981519152604051600080516020613b49833981519152815260200160405180910390a16129a1565b600854600160a060020a031663b36a9a7c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156128d757600080fd5b5af115156128e457600080fd5b50505060405180519050151561292757600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a16129a1565b600254600160a060020a031663985e0dfb85858560405160e060020a63ffffffff8616028152600481019390935260248301919091526001604060020a03166044820152606401602060405180830381600087803b151561298757600080fd5b5af1151561299457600080fd5b5050506040518051600755505b50505050565b6000546101009004600160a060020a031681565b60065481565b60075481565b60025460a060020a90046001604060020a0316600090815260046020526040902060010154600160a060020a031615801590612a30575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b15610efa5760085460025460a060020a90046001604060020a031660009081526004602052604090819020600101547f414654444453526f6c6c6261636b546f56657273696f6e00000000000000000092600160a060020a039081169263ce1426879233921690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612ac957600080fd5b5af11515612ad657600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612b2357600080fd5b5af11515612b3057600080fd5b50505060405180519050158015612c2a57506008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612bb757600080fd5b5af11515612bc457600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612c1157600080fd5b5af11515612c1e57600080fd5b50505060405180519050155b15612c6257600080516020613b09833981519152604051600080516020613b49833981519152815260200160405180910390a161156f565b600854600160a060020a031663b36a9a7c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515612cb857600080fd5b5af11515612cc557600080fd5b505050604051805190501515612d0857600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a161156f565b6000836001604060020a0316118015612d3757506002546001604060020a0360a060020a909104811690841611155b1515612d4257600080fd5b6001604060020a03808416600090815260046020819052604080832060028054600160a060020a8083048916820190981697880260a060020a67ffffffffffffffff02199092169190911782559585529190932083548154600160a060020a0319908116600160a060020a039283161783558686015483880180548316918416919091179055838601548385018054608060020a9283028390046001608060020a0319918216179091556003808901549086018054851691861691909117905587870154968501805490931696909316959095179055600580860154908301805491860295909504911617909255600680840154908301556007808401805494959394612e619492860193919281161561010002600019011604613915565b5060088281018054612e76928401919061398a565b5050600854600254600160a060020a03909116915063090dbda990849060a060020a90046001604060020a031660405160e060020a63ffffffff85160281527f6d67526f6c6c6261636b00000000000000000000000000000000000000000000600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561155e57600080fd5b600254600160a060020a031681565b612f246139db565b60025460a060020a90046001604060020a0316600090815260046020526040902060010154600160a060020a031615801590612f8d575060025460a060020a90046001604060020a031660009081526004602081905260409091200154600160a060020a031615155b156137995760085460025460a060020a90046001604060020a031660009081526004602052604090819020600101547f4146544444534368616e67654163636f756e7453656374696f6e00000000000092600160a060020a039081169263ce1426879233921690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561302657600080fd5b5af1151561303357600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561308057600080fd5b5af1151561308d57600080fd5b5050506040518051905015801561318757506008546002546001604060020a0360a060020a909104166000908152600460208190526040918290200154600160a060020a039283169263ce14268792339290911690631730bdfe90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561311457600080fd5b5af1151561312157600080fd5b5050506040518051905060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561316e57600080fd5b5af1151561317b57600080fd5b50505060405180519050155b156131bf57600080516020613b09833981519152604051600080516020613b49833981519152815260200160405180910390a1613793565b600854600160a060020a031663b36a9a7c338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561321557600080fd5b5af1151561322257600080fd5b50505060405180519050151561326557600080516020613b09833981519152604051600080516020613b69833981519152815260200160405180910390a1613793565b6001608060020a031984161580159061328757506001608060020a0319851615155b801561329257508215155b151561329d57600080fd5b600854600254600160a060020a039091169063090dbda990859060a060020a90046001604060020a031660405160e060020a63ffffffff851602815260a260020a6b1b59d4d958dd1119591d58dd02600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561332357600080fd5b5af1151561333057600080fd5b505060025460a060020a90046001604060020a031660009081526004602052604090819020915060a09051908101604052908160008201606060405190810160409081528254600160a060020a039081168352600184015416602080840191909152600290930154608060020a026001608060020a0319168183015290835291019060038301906060905190810160409081528254600160a060020a0390811683526001808501549091166020808501919091526002948501546001608060020a0319608060020a9091021683850152928552600686015485840152600786018054958301959094918116156101000260001901160491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156134a45780601f10613479576101008083540402835291602001916134a4565b820191906000526020600020905b81548152906001019060200180831161348757829003601f168201915b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156134fd57602002820191906000526020600020905b815481526001909101906020018083116134e8575b5050505050815250509150606060405190810160405280835151600160a060020a03168152602001835160200151600160a060020a031681526001608060020a031987166020909101528252606060405190810160405280836020015151600160a060020a03168152602001836020015160200151600160a060020a031681526001608060020a03198616602091820152838101919091526002805460a060020a67ffffffffffffffff0219811660a060020a918290046001604060020a0390811660010116918202179091556000908152600490915260409020829081518181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a031916608060020a9092049190911790555060208201516003820181518154600160a060020a031916600160a060020a03919091161781556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015160029190910180546001608060020a031916608060020a90920491909117905550604082015160068201556060820151816007019080516136de929160200190613a23565b506080820151816008019080516136f9929160200190613a91565b5050600854600254600160a060020a03909116915063090dbda990859060a060020a90046001604060020a031660405160e060020a63ffffffff851602815260a260020a6b1b59d4d958dd115b9c9bdb1b02600482015260248101929092526001604060020a03166044820152606401600060405180830381600087803b151561378257600080fd5b5af1151561378f57600080fd5b5050505b506129a1565b600080516020613b09833981519152604051600080516020613b29833981519152815260200160405180910390a150505050565b6005602052600090815260409020546001604060020a031681565b6137f06139c9565b604080519081016040526005815260d860020a64302e322e37026020820152905090565b600154600160a060020a03161561382a57600080fd5b61383261383d565b565b60005460ff1681565b60005460ff16151560011480156138575750613857610f2d565b151561386257600080fd5b6000805460ff19169055565b81548183558181151161389257600083815260209020613892918101908301613ace565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138d85782800160ff19823516178555613905565b82800160010185558215613905579182015b828111156139055782358255916020019190600101906138ea565b50613911929150613ace565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061394e5780548555613905565b8280016001018555821561390557600052602060002091601f016020900482015b8281111561390557825482559160010191906001019061396f565b8280548282559060005260206000209081019282156139055760005260206000209182018281111561390557825482559160010191906001019061396f565b60206040519081016040526000815290565b610120604051908101604052806139f0613ae8565b81526020016139fd613ae8565b815260006020820152604001613a116139c9565b8152602001613a1e6139c9565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a6457805160ff1916838001178555613905565b82800160010185558215613905579182015b82811115613905578251825591602001919060010190613a76565b828054828255906000526020600020908101928215613905579160200282015b828111156139055782518255602090920191600190910190613ab1565b6110ab91905b808211156139115760008155600101613ad4565b60606040519081016040908152600080835260208301819052908201529056009f00b5a6056fd0ff1073a0998040602f195b2b110e12fa9d19437150cf3fcedf494e4143544956455f4d4f5254474147450000000000000000000000000000004e4f545f435553544f44595f4143434f554e54494e475f4d414e414745520000524f4c455f4d4f44454c5f4e4f545f414c4c4f57000000000000000000000000a165627a7a723058207fe87ec84ce57ec582d2d2f9151990db27d1a3a26282d494c79e75e6009d191a0029";

    public static final String FUNC_ADDAGREEMENT = "addAgreement";

    public static final String FUNC_REDEMPTION = "redemption";

    public static final String FUNC_CANDISABLE = "canDisable";

    public static final String FUNC_CHANGESTATUS = "changeStatus";

    public static final String FUNC_DISABLE = "disable";

    public static final String FUNC_GETSNAPSHOT = "getSnapshot";

    public static final String FUNC_UPGRADEWITH = "upgradeWith";

    public static final String FUNC_SUCCESSOR = "successor";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_CHANGEACCOUNT = "changeAccount";

    public static final String FUNC_SAVEEXTENDEDINFO = "saveExtendedInfo";

    public static final String FUNC_PRECURSOR = "precursor";

    public static final String FUNC_REDEMPTIONNUMBER = "redemptionNumber";

    public static final String FUNC_EXTENDEDINFO = "extendedInfo";

    public static final String FUNC_ROLLBACKTOVERSION = "rollbackToVersion";

    public static final String FUNC_CONTAINER = "container";

    public static final String FUNC_CHANGEACCOUNTSECTION = "changeAccountSection";

    public static final String FUNC_AGREEMENTS = "agreements";

    public static final String FUNC_CONTRACTVERSION = "contractVersion";

    public static final String FUNC_ENABLE = "enable";

    public static final String FUNC_DISABLED = "disabled";

    public static final Event ERROREVENT_EVENT = new Event("ErrorEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Mortgage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Mortgage(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Mortgage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Mortgage(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addAgreement(byte[] agreementNumber, BigInteger date, byte[] _documentLink, byte[] _meta) {
        final Function function = new Function(
                FUNC_ADDAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(agreementNumber), 
                new org.web3j.abi.datatypes.generated.Uint64(date), 
                new org.web3j.abi.datatypes.generated.Bytes32(_documentLink), 
                new org.web3j.abi.datatypes.DynamicBytes(_meta)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> redemption(byte[] _redemptionNumber, byte[] _documentLink) {
        final Function function = new Function(
                FUNC_REDEMPTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_redemptionNumber), 
                new org.web3j.abi.datatypes.generated.Bytes32(_documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> canDisable() {
        final Function function = new Function(FUNC_CANDISABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> changeStatus(byte[] _status, byte[] documentLink) {
        final Function function = new Function(
                FUNC_CHANGESTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_status), 
                new org.web3j.abi.datatypes.generated.Bytes32(documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> disable() {
        final Function function = new Function(
                FUNC_DISABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple12<BigInteger, byte[], String, String, String, byte[], String, String, byte[], byte[], byte[], List<byte[]>>> getSnapshot(BigInteger _version) {
        final Function function = new Function(FUNC_GETSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(_version)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes16>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes16>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple12<BigInteger, byte[], String, String, String, byte[], String, String, byte[], byte[], byte[], List<byte[]>>>(
                new Callable<Tuple12<BigInteger, byte[], String, String, String, byte[], String, String, byte[], byte[], byte[], List<byte[]>>>() {
                    @Override
                    public Tuple12<BigInteger, byte[], String, String, String, byte[], String, String, byte[], byte[], byte[], List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, byte[], String, String, String, byte[], String, String, byte[], byte[], byte[], List<byte[]>>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (byte[]) results.get(8).getValue(), 
                                (byte[]) results.get(9).getValue(), 
                                (byte[]) results.get(10).getValue(), 
                                convertToNative((List<Bytes32>) results.get(11).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> upgradeWith(String _successor) {
        final Function function = new Function(
                FUNC_UPGRADEWITH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_successor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> successor() {
        final Function function = new Function(FUNC_SUCCESSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> contractName() {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeAccount(String _custodyAssetTo, String _custodyLiabilityTo, byte[] _custodySectionTo, String _accountingAssetTo, String _accountingLiabilityTo, byte[] _accountingSectionTo, byte[] _documentLink) {
        final Function function = new Function(
                FUNC_CHANGEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_custodyAssetTo), 
                new org.web3j.abi.datatypes.Address(_custodyLiabilityTo), 
                new org.web3j.abi.datatypes.generated.Bytes16(_custodySectionTo), 
                new org.web3j.abi.datatypes.Address(_accountingAssetTo), 
                new org.web3j.abi.datatypes.Address(_accountingLiabilityTo), 
                new org.web3j.abi.datatypes.generated.Bytes16(_accountingSectionTo), 
                new org.web3j.abi.datatypes.generated.Bytes32(_documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> saveExtendedInfo(byte[] _modifierId, byte[] _hmac, BigInteger _expiry) {
        final Function function = new Function(
                FUNC_SAVEEXTENDEDINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_modifierId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_hmac), 
                new org.web3j.abi.datatypes.generated.Uint64(_expiry)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> precursor() {
        final Function function = new Function(FUNC_PRECURSOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<byte[]> redemptionNumber() {
        final Function function = new Function(FUNC_REDEMPTIONNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> extendedInfo() {
        final Function function = new Function(FUNC_EXTENDEDINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> rollbackToVersion(BigInteger _version, byte[] _documentLink) {
        final Function function = new Function(
                FUNC_ROLLBACKTOVERSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(_version), 
                new org.web3j.abi.datatypes.generated.Bytes32(_documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> container() {
        final Function function = new Function(FUNC_CONTAINER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeAccountSection(byte[] _custodySectionTo, byte[] _accountingSectionTo, byte[] _documentLink) {
        final Function function = new Function(
                FUNC_CHANGEACCOUNTSECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(_custodySectionTo), 
                new org.web3j.abi.datatypes.generated.Bytes16(_accountingSectionTo), 
                new org.web3j.abi.datatypes.generated.Bytes32(_documentLink)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> agreements(byte[] param0) {
        final Function function = new Function(FUNC_AGREEMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> contractVersion() {
        final Function function = new Function(FUNC_CONTRACTVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> enable() {
        final Function function = new Function(
                FUNC_ENABLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> disabled() {
        final Function function = new Function(FUNC_DISABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public List<ErrorEventEventResponse> getErrorEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERROREVENT_EVENT, transactionReceipt);
        ArrayList<ErrorEventEventResponse> responses = new ArrayList<ErrorEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorEventEventResponse typedResponse = new ErrorEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.errorDetails = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorEventEventResponse> errorEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorEventEventResponse>() {
            @Override
            public ErrorEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERROREVENT_EVENT, log);
                ErrorEventEventResponse typedResponse = new ErrorEventEventResponse();
                typedResponse.log = log;
                typedResponse.errorDetails = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorEventEventResponse> errorEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERROREVENT_EVENT));
        return errorEventEventFlowable(filter);
    }

    @Deprecated
    public static Mortgage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mortgage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Mortgage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mortgage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Mortgage load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Mortgage(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Mortgage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Mortgage(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Mortgage> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _precursor, String _container, String _mortgages, byte[] _number, String _custodyAsset, String _custodyLiability, String _accountingAsset, String _accountingLiability, byte[] _meta) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(_container), 
                new org.web3j.abi.datatypes.Address(_mortgages), 
                new org.web3j.abi.datatypes.DynamicBytes(_number), 
                new org.web3j.abi.datatypes.Address(_custodyAsset), 
                new org.web3j.abi.datatypes.Address(_custodyLiability), 
                new org.web3j.abi.datatypes.Address(_accountingAsset), 
                new org.web3j.abi.datatypes.Address(_accountingLiability), 
                new org.web3j.abi.datatypes.DynamicBytes(_meta)));
        return deployRemoteCall(Mortgage.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Mortgage> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _precursor, String _container, String _mortgages, byte[] _number, String _custodyAsset, String _custodyLiability, String _accountingAsset, String _accountingLiability, byte[] _meta) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(_container), 
                new org.web3j.abi.datatypes.Address(_mortgages), 
                new org.web3j.abi.datatypes.DynamicBytes(_number), 
                new org.web3j.abi.datatypes.Address(_custodyAsset), 
                new org.web3j.abi.datatypes.Address(_custodyLiability), 
                new org.web3j.abi.datatypes.Address(_accountingAsset), 
                new org.web3j.abi.datatypes.Address(_accountingLiability), 
                new org.web3j.abi.datatypes.DynamicBytes(_meta)));
        return deployRemoteCall(Mortgage.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mortgage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _precursor, String _container, String _mortgages, byte[] _number, String _custodyAsset, String _custodyLiability, String _accountingAsset, String _accountingLiability, byte[] _meta) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(_container), 
                new org.web3j.abi.datatypes.Address(_mortgages), 
                new org.web3j.abi.datatypes.DynamicBytes(_number), 
                new org.web3j.abi.datatypes.Address(_custodyAsset), 
                new org.web3j.abi.datatypes.Address(_custodyLiability), 
                new org.web3j.abi.datatypes.Address(_accountingAsset), 
                new org.web3j.abi.datatypes.Address(_accountingLiability), 
                new org.web3j.abi.datatypes.DynamicBytes(_meta)));
        return deployRemoteCall(Mortgage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mortgage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _precursor, String _container, String _mortgages, byte[] _number, String _custodyAsset, String _custodyLiability, String _accountingAsset, String _accountingLiability, byte[] _meta) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_precursor), 
                new org.web3j.abi.datatypes.Address(_container), 
                new org.web3j.abi.datatypes.Address(_mortgages), 
                new org.web3j.abi.datatypes.DynamicBytes(_number), 
                new org.web3j.abi.datatypes.Address(_custodyAsset), 
                new org.web3j.abi.datatypes.Address(_custodyLiability), 
                new org.web3j.abi.datatypes.Address(_accountingAsset), 
                new org.web3j.abi.datatypes.Address(_accountingLiability), 
                new org.web3j.abi.datatypes.DynamicBytes(_meta)));
        return deployRemoteCall(Mortgage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ErrorEventEventResponse {
        public Log log;

        public byte[] errorDetails;
    }
}
